using UnityEngine;
using System.Collections;

public class Player : MonoBehaviour
{
	public  GameObject   mClickEffectPrefab;
	public  GameObject   mClickEffect;
	public 	float walkSpeed = 2f;
	public 	Light light;
	public MovementMotor movement;
	public Transform character ;
	public float cameraSmoothing = 0.01f;
	public float cursorPlaneHeight   = 0;

	private Vector3[] mPath;
	private bool bWalking = false;
	private int mPathIndex = 0;


	// Private memeber data
	private Camera mainCamera;

	
	private Transform cursorObject ;
	
	private Transform mainCameraTransform  ;
	private Vector3 cameraVelocity  = Vector3.zero;

	private Vector3 initOffsetToPlayer ;
	
	// Prepare a cursor point varibale. This is the mouse position on PC and controlled by the thumbstick on mobiles.
	private Vector3 cursorScreenPosition ;
	
	private Plane playerMovementPlane ;
	
	
	private Quaternion screenMovementSpace;
	private Vector3 screenMovementForward ;
	private Vector3 screenMovementRight;


	void Awake () {		
		movement.movementDirection = Vector2.zero;
		movement.facingDirection = Vector2.zero;
		
		// Set main camera
		mainCamera = Camera.main;
		mainCameraTransform = mainCamera.transform;
		
		// Ensure we have character set
		// Default to using the transform this component is on
		if (!character)
			character = transform;
		
		initOffsetToPlayer = mainCameraTransform.position - character.position;
		
		// Set the initial cursor position to the center of the screen
		cursorScreenPosition = new Vector3 (0.5f * Screen.width, 0.5f * Screen.height, 0f);
		
		// caching movement plane
		playerMovementPlane = new Plane (character.up, character.position + 
		                                 character.up * cursorPlaneHeight);
	}
	// Use this for initialization
	void Start ()
	{
//		GameObject.Find ("Main Camera").GetComponent<SceneCamera> ().player = this.gameObject;
		screenMovementSpace = Quaternion.Euler (0, mainCameraTransform.eulerAngles.y, 0);
		screenMovementForward = screenMovementSpace * Vector3.forward;
		screenMovementRight = screenMovementSpace * Vector3.right;
	}

	// Update is called once per frame
	void Update ()
	{
//		Debug.Log ("Horizontal value: " + Input.GetAxis ("Horizontal"));
//
//		Vector3 direction = Input.GetAxis ("Horizontal") * transform.right + 
//							Input.GetAxis ("Vertical") * transform.forward;
//		movement.movementDirection = direction.normalized;
//
////		GetComponent<Rigidbody> ().AddForce (direction.normalized * walkSpeed, ForceMode.Acceleration);
//
////		transform.position = transform.position + 
////							walkSpeed * direction * Time.deltaTime ;
//
//		if (bWalking) {
//				bWalking = Walking ();
//		} else {
//		}

		UpdateMovement ();
		UpdateCameraPos ();
	}

	void UpdateMovement () {
		
		// HANDLE CHARACTER MOVEMENT DIRECTION
		
		Vector3 direction = Input.GetAxis ("Horizontal") * screenMovementRight 
			+ Input.GetAxis ("Vertical") * screenMovementForward;
		
		movement.movementDirection = direction.normalized;
		
		
		UpdateFacingDirection ();
		
	}

	void UpdateFacingDirection()
	{
		playerMovementPlane.normal = character.up;
		playerMovementPlane.distance = -character.position.y + cursorPlaneHeight;
		
		// On PC, the cursor point is the mouse position
		Vector3 cursorScreenPosition  = Input.mousePosition;
		
		// Find out where the mouse ray intersects with the movement plane of the player
		Vector3 cursorWorldPosition  = ScreenPointToWorldPointOnPlane (cursorScreenPosition, 
		                                                               playerMovementPlane,
		                                                               mainCamera);
		
		
		// The facing direction is the direction from the character to the cursor world position
		movement.facingDirection = (cursorWorldPosition - character.position);
		movement.facingDirection.y = 0f;	
	}

	void UpdateCameraPos()
	{
		Vector3 cameraTargetPosition = character.position +
						initOffsetToPlayer;
		
		// Apply some smoothing to the camera movement
		mainCameraTransform.position = cameraTargetPosition;
	}

	public void WalkTo (Vector3 pos, bool withClickEffect = true)
	{

		if ((this.transform.position - pos).magnitude < 0.001f) {
			return;
		}

		Vector3[] corners = CalcPathCorners (this.transform.position, pos);

		if (corners.Length >= 2) {
			bWalking = true;
			mPath = corners;
			bWalking = true;
//			Animation anim = GetComponent<Animation> ();
//			anim.CrossFade ("run_forward", 0.3f);
			mPathIndex = 0;
			transform.position = mPath [0];
			if (mClickEffect != null && withClickEffect) {
					mClickEffect.SetActive (true);
					pos.y += 0.5f;
					mClickEffect.transform.position = pos;
					Invoke ("HideClickEffect", 1.5f);
			}
		}
	}

	private void HideClickEffect ()
	{
		if (mClickEffect != null) {
			mClickEffect.SetActive (false);
		}
	}

	private bool Walking ()
	{
		bool re = true;

		Vector3 curSegSrc = mPath [mPathIndex];
		Vector3 curSegDst = mPath [mPathIndex + 1];
		Vector3 curPos = transform.position;

		Vector3 normalDir = (curSegDst - curSegSrc);
		normalDir.Normalize ();

		curPos += (normalDir * walkSpeed * Time.deltaTime);

		float over = (curPos - curSegSrc).magnitude - (curSegDst - curSegSrc).magnitude;
		if (over > 0) {
				mPathIndex ++;
				if (mPathIndex > mPath.Length - 2) {
						curPos = mPath [mPath.Length - 1];
						transform.position = curPos;
						re = false;
						Animation anim = GetComponent<Animation> ();
//						anim.CrossFade ("idle", 0.3f);
				} else {
						curSegSrc = mPath [mPathIndex];
						curSegDst = mPath [mPathIndex + 1];
						normalDir = (curSegDst - curSegSrc);
						normalDir.Normalize ();
						curPos = curSegSrc + normalDir * over;

						transform.position = curPos;
				}
		} else {
				transform.position = curPos;
		}
		return re;
	}


	Vector3[] CalcPathCorners (Vector3 src, Vector3 dst)
	{
		Vector3[] corners = null;
		NavMeshPath path = new NavMeshPath ();
		//if (NavMesh.CalculatePath(src, dst, -1, path)){
		if (false) {
				corners = path.corners;
		} else {
				corners = new Vector3[2]{src, dst};
		}
		return corners;
	}

	public static Vector3  PlaneRayIntersection (Plane plane , Ray ray )  {
		float dist = 0f;
		plane.Raycast (ray, out dist);
		return ray.GetPoint (dist);
	}
	
	public static Vector3 ScreenPointToWorldPointOnPlane (Vector3 screenPoint , Plane plane , Camera camera ) 
	{
		// Set up a ray corresponding to the screen position
		Ray ray = camera.ScreenPointToRay (screenPoint);
		
		// Find out where the ray intersects with the plane
		return PlaneRayIntersection (plane, ray);
	}



	void WalkForward()
	{
		transform.position = transform.position + 
							 walkSpeed * transform.forward * Time.deltaTime ;
	}
}
